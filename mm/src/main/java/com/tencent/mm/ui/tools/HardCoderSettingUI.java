package com.tencent.mm.ui.tools;

import android.app.Dialog;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.MenuItem;
import android.view.View;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import com.tencent.matrix.trace.core.AppMethodBeat;
import com.tencent.mm.R;
import com.tencent.mm.hardcoder.WXHardCoderJNI;
import com.tencent.mm.hardcoder.g;
import com.tencent.mm.hellhoundlib.a.a;
import com.tencent.mm.hellhoundlib.b.b;
import com.tencent.mm.pluginsdk.i.f;
import com.tencent.mm.sdk.platformtools.LocaleUtil;
import com.tencent.mm.sdk.platformtools.Log;
import com.tencent.mm.sdk.platformtools.MMApplicationContext;
import com.tencent.mm.sdk.platformtools.Util;
import com.tencent.mm.ui.MMActivity;
import java.sql.Time;
import java.text.DateFormat;

public class HardCoderSettingUI extends MMActivity {
    private boolean Dbg = false;
    private final TimePickerDialog.OnTimeSetListener Dbh = new TimePickerDialog.OnTimeSetListener() {
        /* class com.tencent.mm.ui.tools.HardCoderSettingUI.AnonymousClass5 */

        public final void onTimeSet(TimePicker timePicker, int i2, int i3) {
            AppMethodBeat.i(39063);
            if (HardCoderSettingUI.this.Dbg) {
                WXHardCoderJNI.hcBeginTimeHour = i2;
                WXHardCoderJNI.hcBeginTimeMin = i3;
                HardCoderSettingUI.this.QqW.setText(HardCoderSettingUI.o(HardCoderSettingUI.this, WXHardCoderJNI.hcBeginTimeHour, WXHardCoderJNI.hcBeginTimeMin));
                AppMethodBeat.o(39063);
                return;
            }
            WXHardCoderJNI.hcEndTimeHour = i2;
            WXHardCoderJNI.hcEndTimeMin = i3;
            HardCoderSettingUI.this.QqX.setText(HardCoderSettingUI.o(HardCoderSettingUI.this, WXHardCoderJNI.hcEndTimeHour, WXHardCoderJNI.hcEndTimeMin));
            AppMethodBeat.o(39063);
        }
    };
    private CheckBox QqR;
    private EditText QqS;
    private CheckBox QqT;
    private CheckBox QqU;
    private CheckBox QqV;
    private TextView QqW;
    private TextView QqX;
    private CheckBox QqY;
    private EditText QqZ;
    private CheckBox QrA;
    private EditText QrB;
    private EditText QrC;
    private EditText QrD;
    private Spinner QrE;
    private Spinner QrF;
    private CheckBox QrG;
    private CheckBox QrH;
    private EditText QrI;
    private EditText QrJ;
    private EditText QrK;
    private Spinner QrL;
    private Spinner QrM;
    private CheckBox QrN;
    private CheckBox QrO;
    private EditText QrP;
    private EditText QrQ;
    private EditText QrR;
    private Spinner QrS;
    private Spinner QrT;
    private CheckBox QrU;
    private EditText QrV;
    private CheckBox QrW;
    private EditText QrX;
    private EditText QrY;
    private EditText QrZ;
    private EditText Qra;
    private EditText Qrb;
    private Spinner Qrc;
    private Spinner Qrd;
    private CheckBox Qre;
    private CheckBox Qrf;
    private EditText Qrg;
    private EditText Qrh;
    private EditText Qri;
    private Spinner Qrj;
    private Spinner Qrk;
    private CheckBox Qrl;
    private CheckBox Qrm;
    private EditText Qrn;
    private EditText Qro;
    private EditText Qrp;
    private Spinner Qrq;
    private Spinner Qrr;
    private CheckBox Qrs;
    private CheckBox Qrt;
    private EditText Qru;
    private EditText Qrv;
    private EditText Qrw;
    private Spinner Qrx;
    private Spinner Qry;
    private CheckBox Qrz;
    private CheckBox QsA;
    private CheckBox QsB;
    private EditText QsC;
    private EditText QsD;
    private EditText QsE;
    private Spinner QsF;
    private Spinner QsG;
    private CheckBox QsH;
    private CheckBox QsI;
    private EditText QsJ;
    private EditText QsK;
    private EditText QsL;
    private Spinner QsM;
    private Spinner QsN;
    private CheckBox QsO;
    private CheckBox QsP;
    private EditText QsQ;
    private EditText QsR;
    private EditText QsS;
    private Spinner QsT;
    private Spinner QsU;
    private CheckBox QsV;
    private CheckBox QsW;
    private EditText QsX;
    private EditText QsY;
    private EditText QsZ;
    private EditText Qsa;
    private EditText Qsb;
    private EditText Qsc;
    private Spinner Qsd;
    private Spinner Qse;
    private CheckBox Qsf;
    private CheckBox Qsg;
    private EditText Qsh;
    private EditText Qsi;
    private EditText Qsj;
    private Spinner Qsk;
    private Spinner Qsl;
    private CheckBox Qsm;
    private CheckBox Qsn;
    private EditText Qso;
    private EditText Qsp;
    private EditText Qsq;
    private Spinner Qsr;
    private Spinner Qss;
    private CheckBox Qst;
    private CheckBox Qsu;
    private EditText Qsv;
    private EditText Qsw;
    private EditText Qsx;
    private Spinner Qsy;
    private Spinner Qsz;
    private Spinner Qta;
    private Spinner Qtb;
    private CheckBox Qtc;
    private CheckBox Qtd;
    private EditText Qte;
    private EditText Qtf;
    private EditText Qtg;
    private Spinner Qth;
    private Spinner Qti;
    private CheckBox Qtj;
    private CheckBox Qtk;
    private EditText Qtl;
    private EditText Qtm;
    private EditText Qtn;
    private Spinner Qto;
    private Spinner Qtp;
    private CheckBox Qtq;
    private CheckBox Qtr;
    private EditText Qts;
    private EditText Qtt;
    private EditText Qtu;
    private Spinner Qtv;
    private Spinner Qtw;
    private CheckBox Qtx;

    @Override // com.tencent.mm.ui.component.UIComponentActivity, com.tencent.mm.ui.component.UIComponentActivity, com.tencent.mm.ui.MMActivity, com.tencent.mm.hellhoundlib.activities.HellActivity, com.tencent.mm.ui.MMFragmentActivity
    public void onWindowFocusChanged(boolean z) {
        super.onWindowFocusChanged(z);
        AppMethodBeat.at(this, z);
    }

    public HardCoderSettingUI() {
        AppMethodBeat.i(39064);
        AppMethodBeat.o(39064);
    }

    static /* synthetic */ String o(Context context, int i2, int i3) {
        AppMethodBeat.i(39070);
        String i4 = i(context, i2, i3);
        AppMethodBeat.o(39070);
        return i4;
    }

    @Override // android.support.v4.app.SupportActivity, com.tencent.mm.ui.component.UIComponentActivity, com.tencent.mm.ui.MMActivity, com.tencent.mm.hellhoundlib.activities.HellActivity, android.support.v7.app.AppCompatActivity, com.tencent.mm.ui.MMFragmentActivity, android.support.v4.app.FragmentActivity
    public void onCreate(Bundle bundle) {
        AppMethodBeat.i(39065);
        super.onCreate(bundle);
        setMMTitle(R.string.gp9);
        setBackBtn(new MenuItem.OnMenuItemClickListener() {
            /* class com.tencent.mm.ui.tools.HardCoderSettingUI.AnonymousClass1 */

            public final boolean onMenuItemClick(MenuItem menuItem) {
                AppMethodBeat.i(39059);
                HardCoderSettingUI.this.finish();
                AppMethodBeat.o(39059);
                return true;
            }
        });
        SharedPreferences sharedPreferences = getContext().getSharedPreferences(WXHardCoderJNI.SETTING_SP_FILE, 0);
        if (!sharedPreferences.contains(WXHardCoderJNI.KEY_HC_ENABLE)) {
            b(sharedPreferences.edit().putBoolean(WXHardCoderJNI.KEY_HC_ENABLE, true));
        }
        this.QqT = (CheckBox) findViewById(R.id.azq);
        this.QqT.setChecked(WXHardCoderJNI.getDebug());
        this.QqR = (CheckBox) findViewById(R.id.azw);
        this.QqR.setChecked(WXHardCoderJNI.getEnable());
        this.QqS = (EditText) findViewById(R.id.h5t);
        this.QqS.setText(new StringBuilder().append(WXHardCoderJNI.hcRetryInterval).toString());
        this.QqU = (CheckBox) findViewById(R.id.azo);
        this.QqV = (CheckBox) findViewById(R.id.azs);
        this.QqV.setChecked(WXHardCoderJNI.hcTimeLimit);
        this.QqW = (TextView) findViewById(R.id.a2t);
        this.QqX = (TextView) findViewById(R.id.c3t);
        this.QqW.setText(i(this, WXHardCoderJNI.hcBeginTimeHour, WXHardCoderJNI.hcBeginTimeMin));
        this.QqX.setText(i(this, WXHardCoderJNI.hcEndTimeHour, WXHardCoderJNI.hcEndTimeMin));
        this.QqW.setOnClickListener(new View.OnClickListener() {
            /* class com.tencent.mm.ui.tools.HardCoderSettingUI.AnonymousClass2 */

            public final void onClick(View view) {
                AppMethodBeat.i(39060);
                b bVar = new b();
                bVar.bm(view);
                a.b("com/tencent/mm/ui/tools/HardCoderSettingUI$2", "android/view/View$OnClickListener", "onClick", "(Landroid/view/View;)V", this, bVar.axR());
                HardCoderSettingUI.this.Dbg = true;
                HardCoderSettingUI.this.showDialog(1);
                a.a(this, "com/tencent/mm/ui/tools/HardCoderSettingUI$2", "android/view/View$OnClickListener", "onClick", "(Landroid/view/View;)V");
                AppMethodBeat.o(39060);
            }
        });
        this.QqX.setOnClickListener(new View.OnClickListener() {
            /* class com.tencent.mm.ui.tools.HardCoderSettingUI.AnonymousClass3 */

            public final void onClick(View view) {
                AppMethodBeat.i(39061);
                b bVar = new b();
                bVar.bm(view);
                a.b("com/tencent/mm/ui/tools/HardCoderSettingUI$3", "android/view/View$OnClickListener", "onClick", "(Landroid/view/View;)V", this, bVar.axR());
                HardCoderSettingUI.this.Dbg = false;
                HardCoderSettingUI.this.showDialog(1);
                a.a(this, "com/tencent/mm/ui/tools/HardCoderSettingUI$3", "android/view/View$OnClickListener", "onClick", "(Landroid/view/View;)V");
                AppMethodBeat.o(39061);
            }
        });
        this.QqY = (CheckBox) findViewById(R.id.azl);
        this.QqY.setChecked(WXHardCoderJNI.hcBootEnable);
        this.QqZ = (EditText) findViewById(R.id.bls);
        this.QqZ.setText(new StringBuilder().append(WXHardCoderJNI.hcBootDelay).toString());
        this.Qra = (EditText) findViewById(R.id.in9);
        this.Qra.setText(new StringBuilder().append(WXHardCoderJNI.hcBootTimeout).toString());
        this.Qra.setSelection(this.Qra.getText().length());
        this.Qrb = (EditText) findViewById(R.id.cj);
        this.Qrb.setText(new StringBuilder().append(WXHardCoderJNI.hcBootAction).toString());
        this.Qrc = (Spinner) findViewById(R.id.bhi);
        this.Qrc.setSelection(WXHardCoderJNI.hcBootCPU);
        this.Qrd = (Spinner) findViewById(R.id.e0x);
        this.Qrd.setSelection(WXHardCoderJNI.hcBootIO);
        this.Qre = (CheckBox) findViewById(R.id.ilp);
        this.Qre.setChecked(WXHardCoderJNI.hcBootThr);
        this.Qrf = (CheckBox) findViewById(R.id.azt);
        this.Qrf.setChecked(WXHardCoderJNI.hcEnterChattingEnable);
        this.Qrg = (EditText) findViewById(R.id.blw);
        this.Qrg.setText(new StringBuilder().append(WXHardCoderJNI.hcEnterChattingDelay).toString());
        this.Qrh = (EditText) findViewById(R.id.inc);
        this.Qrh.setText(new StringBuilder().append(WXHardCoderJNI.hcEnterChattingTimeout).toString());
        this.Qrh.setSelection(this.Qrh.getText().length());
        this.Qri = (EditText) findViewById(R.id.ct);
        this.Qri.setText(new StringBuilder().append(WXHardCoderJNI.hcEnterChattingAction).toString());
        this.Qrj = (Spinner) findViewById(R.id.bhl);
        this.Qrj.setSelection(WXHardCoderJNI.hcEnterChattingCPU);
        this.Qrk = (Spinner) findViewById(R.id.e10);
        this.Qrk.setSelection(WXHardCoderJNI.hcEnterChattingIO);
        this.Qrl = (CheckBox) findViewById(R.id.ils);
        this.Qrl.setChecked(WXHardCoderJNI.hcEnterChattingThr);
        this.Qrm = (CheckBox) findViewById(R.id.b04);
        this.Qrm.setChecked(WXHardCoderJNI.hcQuitChattingEnable);
        this.Qrn = (EditText) findViewById(R.id.bm0);
        this.Qrn.setText(new StringBuilder().append(WXHardCoderJNI.hcQuitChattingDelay).toString());
        this.Qro = (EditText) findViewById(R.id.ing);
        this.Qro.setText(new StringBuilder().append(WXHardCoderJNI.hcQuitChattingTimeout).toString());
        this.Qro.setSelection(this.Qro.getText().length());
        this.Qrp = (EditText) findViewById(R.id.d_);
        this.Qrp.setText(new StringBuilder().append(WXHardCoderJNI.hcQuitChattingAction).toString());
        this.Qrq = (Spinner) findViewById(R.id.bhp);
        this.Qrq.setSelection(WXHardCoderJNI.hcQuitChattingCPU);
        this.Qrr = (Spinner) findViewById(R.id.e14);
        this.Qrr.setSelection(WXHardCoderJNI.hcQuitChattingIO);
        this.Qrs = (CheckBox) findViewById(R.id.ilw);
        this.Qrs.setChecked(WXHardCoderJNI.hcQuitChattingThr);
        this.Qrt = (CheckBox) findViewById(R.id.b07);
        this.Qrt.setChecked(WXHardCoderJNI.hcSendMsgEnable);
        this.Qru = (EditText) findViewById(R.id.bm2);
        this.Qru.setText(new StringBuilder().append(WXHardCoderJNI.hcSendMsgDelay).toString());
        this.Qrv = (EditText) findViewById(R.id.ini);
        this.Qrv.setText(new StringBuilder().append(WXHardCoderJNI.hcSendMsgTimeout).toString());
        this.Qrv.setSelection(this.Qrv.getText().length());
        this.Qrw = (EditText) findViewById(R.id.dc);
        this.Qrw.setText(new StringBuilder().append(WXHardCoderJNI.hcSendMsgAction).toString());
        this.Qrx = (Spinner) findViewById(R.id.bhr);
        this.Qrx.setSelection(WXHardCoderJNI.hcSendMsgCPU);
        this.Qry = (Spinner) findViewById(R.id.e16);
        this.Qry.setSelection(WXHardCoderJNI.hcSendMsgIO);
        this.Qrz = (CheckBox) findViewById(R.id.ily);
        this.Qrz.setChecked(WXHardCoderJNI.hcSendMsgThr);
        this.QrA = (CheckBox) findViewById(R.id.b08);
        this.QrA.setChecked(WXHardCoderJNI.hcSendPicMsgEnable);
        this.QrB = (EditText) findViewById(R.id.bm3);
        this.QrB.setText(new StringBuilder().append(WXHardCoderJNI.hcSendPicMsgDelay).toString());
        this.QrC = (EditText) findViewById(R.id.inj);
        this.QrC.setText(new StringBuilder().append(WXHardCoderJNI.hcSendPicMsgTimeout).toString());
        this.QrC.setSelection(this.QrC.getText().length());
        this.QrD = (EditText) findViewById(R.id.dd);
        this.QrD.setText(new StringBuilder().append(WXHardCoderJNI.hcSendPicMsgAction).toString());
        this.QrE = (Spinner) findViewById(R.id.bhs);
        this.QrE.setSelection(WXHardCoderJNI.hcSendPicMsgCPU);
        this.QrF = (Spinner) findViewById(R.id.e17);
        this.QrF.setSelection(WXHardCoderJNI.hcSendPicMsgIO);
        this.QrG = (CheckBox) findViewById(R.id.ilz);
        this.QrG.setChecked(WXHardCoderJNI.hcSendPicMsgThr);
        this.QrH = (CheckBox) findViewById(R.id.b05);
        this.QrH.setChecked(WXHardCoderJNI.hcReceiveMsgEnable);
        this.QrI = (EditText) findViewById(R.id.bm1);
        this.QrI.setText(new StringBuilder().append(WXHardCoderJNI.hcReceiveMsgDelay).toString());
        this.QrJ = (EditText) findViewById(R.id.inh);
        this.QrJ.setText(new StringBuilder().append(WXHardCoderJNI.hcReceiveMsgTimeout).toString());
        this.QrJ.setSelection(this.QrJ.getText().length());
        this.QrK = (EditText) findViewById(R.id.da);
        this.QrK.setText(new StringBuilder().append(WXHardCoderJNI.hcReceiveMsgAction).toString());
        this.QrL = (Spinner) findViewById(R.id.bhq);
        this.QrL.setSelection(WXHardCoderJNI.hcReceiveMsgCPU);
        this.QrM = (Spinner) findViewById(R.id.e15);
        this.QrM.setSelection(WXHardCoderJNI.hcReceiveMsgIO);
        this.QrN = (CheckBox) findViewById(R.id.ilx);
        this.QrN.setChecked(WXHardCoderJNI.hcReceiveMsgThr);
        this.QrO = (CheckBox) findViewById(R.id.b0k);
        this.QrO.setChecked(WXHardCoderJNI.hcUpdateChatroomEnable);
        this.QrP = (EditText) findViewById(R.id.bm7);
        this.QrP.setText(new StringBuilder().append(WXHardCoderJNI.hcUpdateChatroomDelay).toString());
        this.QrQ = (EditText) findViewById(R.id.inn);
        this.QrQ.setText(new StringBuilder().append(WXHardCoderJNI.hcUpdateChatroomTimeout).toString());
        this.QrQ.setSelection(this.QrQ.getText().length());
        this.QrR = (EditText) findViewById(R.id.dn);
        this.QrR.setText(new StringBuilder().append(WXHardCoderJNI.hcUpdateChatroomAction).toString());
        this.QrS = (Spinner) findViewById(R.id.bhw);
        this.QrS.setSelection(WXHardCoderJNI.hcUpdateChatroomCPU);
        this.QrT = (Spinner) findViewById(R.id.e1a);
        this.QrT.setSelection(WXHardCoderJNI.hcUpdateChatroomIO);
        this.QrU = (CheckBox) findViewById(R.id.im3);
        this.QrU.setChecked(WXHardCoderJNI.hcUpdateChatroomThr);
        this.QrV = (EditText) findViewById(R.id.j0f);
        this.QrV.setText(new StringBuilder().append(WXHardCoderJNI.hcUpdateChatroomMemberCount).toString());
        this.QrW = (CheckBox) findViewById(R.id.azp);
        this.QrW.setChecked(WXHardCoderJNI.hcDBEnable);
        this.QrX = (EditText) findViewById(R.id.blt);
        this.QrX.setText(new StringBuilder().append(WXHardCoderJNI.hcDBDelayQuery).toString());
        this.QrY = (EditText) findViewById(R.id.blu);
        this.QrY.setText(new StringBuilder().append(WXHardCoderJNI.hcDBDelayWrite).toString());
        this.QrZ = (EditText) findViewById(R.id.in_);
        this.QrZ.setText(new StringBuilder().append(WXHardCoderJNI.hcDBTimeout).toString());
        this.Qsa = (EditText) findViewById(R.id.ina);
        this.Qsa.setText(new StringBuilder().append(WXHardCoderJNI.hcDBTimeoutBusy).toString());
        this.Qsb = (EditText) findViewById(R.id.co);
        this.Qsb.setText(new StringBuilder().append(WXHardCoderJNI.hcDBActionQuery).toString());
        this.Qsc = (EditText) findViewById(R.id.cp);
        this.Qsc.setText(new StringBuilder().append(WXHardCoderJNI.hcDBActionWrite).toString());
        this.Qsd = (Spinner) findViewById(R.id.bhj);
        this.Qsd.setSelection(WXHardCoderJNI.hcDBCPU);
        this.Qse = (Spinner) findViewById(R.id.e0y);
        this.Qse.setSelection(WXHardCoderJNI.hcDBIO);
        this.Qsf = (CheckBox) findViewById(R.id.ilq);
        this.Qsf.setChecked(WXHardCoderJNI.hcDBThr);
        this.Qsg = (CheckBox) findViewById(R.id.b0l);
        this.Qsg.setChecked(WXHardCoderJNI.hcEncodeVideoEnable);
        this.Qsh = (EditText) findViewById(R.id.bm8);
        this.Qsh.setText(new StringBuilder().append(WXHardCoderJNI.hcEncodeVideoDelay).toString());
        this.Qsi = (EditText) findViewById(R.id.ino);
        this.Qsi.setText(new StringBuilder().append(WXHardCoderJNI.hcEncodeVideoTimeout).toString());
        this.Qsj = (EditText) findViewById(R.id.f15do);
        this.Qsj.setText(new StringBuilder().append(WXHardCoderJNI.hcEncodeVideoAction).toString());
        this.Qsk = (Spinner) findViewById(R.id.bhx);
        this.Qsk.setSelection(WXHardCoderJNI.hcEncodeVideoCPU);
        this.Qsl = (Spinner) findViewById(R.id.e1b);
        this.Qsl.setSelection(WXHardCoderJNI.hcEncodeVideoIO);
        this.Qsm = (CheckBox) findViewById(R.id.im4);
        this.Qsm.setChecked(WXHardCoderJNI.hcEncodeVideoThr);
        this.Qsn = (CheckBox) findViewById(R.id.azr);
        this.Qsn.setChecked(WXHardCoderJNI.hcDecodePicEnable);
        this.Qso = (EditText) findViewById(R.id.blv);
        this.Qso.setText(new StringBuilder().append(WXHardCoderJNI.hcDecodePicDelay).toString());
        this.Qsp = (EditText) findViewById(R.id.inb);
        this.Qsp.setText(new StringBuilder().append(WXHardCoderJNI.hcDecodePicTimeout).toString());
        this.Qsq = (EditText) findViewById(R.id.cq);
        this.Qsq.setText(new StringBuilder().append(WXHardCoderJNI.hcDecodePicAction).toString());
        this.Qsr = (Spinner) findViewById(R.id.bhk);
        this.Qsr.setSelection(WXHardCoderJNI.hcDecodePicCPU);
        this.Qss = (Spinner) findViewById(R.id.e0z);
        this.Qss.setSelection(WXHardCoderJNI.hcDecodePicIO);
        this.Qst = (CheckBox) findViewById(R.id.ilr);
        this.Qst.setChecked(WXHardCoderJNI.hcDecodePicThr);
        this.Qsu = (CheckBox) findViewById(R.id.azu);
        this.Qsu.setChecked(WXHardCoderJNI.hcGifEnable);
        this.Qsv = (EditText) findViewById(R.id.blx);
        this.Qsv.setText(new StringBuilder().append(WXHardCoderJNI.hcGifDelay).toString());
        this.Qsw = (EditText) findViewById(R.id.ind);
        this.Qsw.setText(new StringBuilder().append(WXHardCoderJNI.hcGifTimeout).toString());
        this.Qsx = (EditText) findViewById(R.id.cu);
        this.Qsx.setText(new StringBuilder().append(WXHardCoderJNI.hcGifAction).toString());
        this.Qsy = (Spinner) findViewById(R.id.bhm);
        this.Qsy.setSelection(WXHardCoderJNI.hcGifCPU);
        this.Qsz = (Spinner) findViewById(R.id.e11);
        this.Qsz.setSelection(WXHardCoderJNI.hcGifIO);
        this.QsA = (CheckBox) findViewById(R.id.ilt);
        this.QsA.setChecked(WXHardCoderJNI.hcGifThr);
        this.QsB = (CheckBox) findViewById(R.id.azv);
        this.QsB.setChecked(WXHardCoderJNI.hcGifFrameEnable);
        this.QsC = (EditText) findViewById(R.id.bly);
        this.QsC.setText(new StringBuilder().append(WXHardCoderJNI.hcGifFrameDelay).toString());
        this.QsD = (EditText) findViewById(R.id.ine);
        this.QsD.setText(new StringBuilder().append(WXHardCoderJNI.hcGifFrameTimeout).toString());
        this.QsE = (EditText) findViewById(R.id.cv);
        this.QsE.setText(new StringBuilder().append(WXHardCoderJNI.hcGifFrameAction).toString());
        this.QsF = (Spinner) findViewById(R.id.bhn);
        this.QsF.setSelection(WXHardCoderJNI.hcGifFrameCPU);
        this.QsG = (Spinner) findViewById(R.id.e12);
        this.QsG.setSelection(WXHardCoderJNI.hcGifFrameIO);
        this.QsH = (CheckBox) findViewById(R.id.ilu);
        this.QsH.setChecked(WXHardCoderJNI.hcGifFrameThr);
        this.QsI = (CheckBox) findViewById(R.id.b0b);
        this.QsI.setChecked(WXHardCoderJNI.hcSNSScrollEnable);
        this.QsJ = (EditText) findViewById(R.id.bm5);
        this.QsJ.setText(new StringBuilder().append(WXHardCoderJNI.hcSNSScrollDelay).toString());
        this.QsK = (EditText) findViewById(R.id.inl);
        this.QsK.setText(new StringBuilder().append(WXHardCoderJNI.hcSNSScrollTimeout).toString());
        this.QsL = (EditText) findViewById(R.id.dg);
        this.QsL.setText(new StringBuilder().append(WXHardCoderJNI.hcSNSScrollAction).toString());
        this.QsM = (Spinner) findViewById(R.id.bhu);
        this.QsM.setSelection(WXHardCoderJNI.hcSNSScrollCPU);
        this.QsN = (Spinner) findViewById(R.id.e19);
        this.QsN.setSelection(WXHardCoderJNI.hcSNSScrollIO);
        this.QsO = (CheckBox) findViewById(R.id.im1);
        this.QsO.setChecked(WXHardCoderJNI.hcSNSScrollThr);
        this.QsP = (CheckBox) findViewById(R.id.b0c);
        this.QsP.setChecked(WXHardCoderJNI.hcSNSUserScrollEnable);
        this.QsQ = (EditText) findViewById(R.id.bm6);
        this.QsQ.setText(new StringBuilder().append(WXHardCoderJNI.hcSNSUserScrollDelay).toString());
        this.QsR = (EditText) findViewById(R.id.inm);
        this.QsR.setText(new StringBuilder().append(WXHardCoderJNI.hcSNSUserScrollTimeout).toString());
        this.QsS = (EditText) findViewById(R.id.dh);
        this.QsS.setText(new StringBuilder().append(WXHardCoderJNI.hcSNSUserScrollAction).toString());
        this.QsT = (Spinner) findViewById(R.id.bhv);
        this.QsT.setSelection(WXHardCoderJNI.hcSNSUserScrollCPU);
        this.QsU = (Spinner) findViewById(R.id.e1_);
        this.QsU.setSelection(WXHardCoderJNI.hcSNSUserScrollIO);
        this.QsV = (CheckBox) findViewById(R.id.im2);
        this.QsV.setChecked(WXHardCoderJNI.hcSNSUserScrollThr);
        this.QsW = (CheckBox) findViewById(R.id.b0a);
        this.QsW.setChecked(WXHardCoderJNI.hcSNSMsgScrollEnable);
        this.QsX = (EditText) findViewById(R.id.bm4);
        this.QsX.setText(new StringBuilder().append(WXHardCoderJNI.hcSNSMsgScrollDelay).toString());
        this.QsY = (EditText) findViewById(R.id.ink);
        this.QsY.setText(new StringBuilder().append(WXHardCoderJNI.hcSNSMsgScrollTimeout).toString());
        this.QsZ = (EditText) findViewById(R.id.df);
        this.QsZ.setText(new StringBuilder().append(WXHardCoderJNI.hcSNSMsgScrollAction).toString());
        this.Qta = (Spinner) findViewById(R.id.bht);
        this.Qta.setSelection(WXHardCoderJNI.hcSNSMsgScrollCPU);
        this.Qtb = (Spinner) findViewById(R.id.e18);
        this.Qtb.setSelection(WXHardCoderJNI.hcSNSMsgScrollIO);
        this.Qtc = (CheckBox) findViewById(R.id.im0);
        this.Qtc.setChecked(WXHardCoderJNI.hcSNSMsgScrollThr);
        this.Qtd = (CheckBox) findViewById(R.id.azz);
        this.Qtd.setChecked(WXHardCoderJNI.hcMediaGalleryScrollEnable);
        this.Qte = (EditText) findViewById(R.id.blz);
        this.Qte.setText(new StringBuilder().append(WXHardCoderJNI.hcMediaGalleryScrollDelay).toString());
        this.Qtf = (EditText) findViewById(R.id.inf);
        this.Qtf.setText(new StringBuilder().append(WXHardCoderJNI.hcMediaGalleryScrollTimeout).toString());
        this.Qtg = (EditText) findViewById(R.id.d0);
        this.Qtg.setText(new StringBuilder().append(WXHardCoderJNI.hcMediaGalleryScrollAction).toString());
        this.Qth = (Spinner) findViewById(R.id.bho);
        this.Qth.setSelection(WXHardCoderJNI.hcMediaGalleryScrollCPU);
        this.Qti = (Spinner) findViewById(R.id.e13);
        this.Qti.setSelection(WXHardCoderJNI.hcMediaGalleryScrollIO);
        this.Qtj = (CheckBox) findViewById(R.id.ilv);
        this.Qtj.setChecked(WXHardCoderJNI.hcMediaGalleryScrollThr);
        this.Qtk = (CheckBox) findViewById(R.id.azj);
        this.Qtk.setChecked(WXHardCoderJNI.hcAlbumScrollEnable);
        this.Qtl = (EditText) findViewById(R.id.blq);
        this.Qtl.setText(new StringBuilder().append(WXHardCoderJNI.hcAlbumScrollDelay).toString());
        this.Qtm = (EditText) findViewById(R.id.in7);
        this.Qtm.setText(new StringBuilder().append(WXHardCoderJNI.hcAlbumScrollTimeout).toString());
        this.Qtn = (EditText) findViewById(R.id.c6);
        this.Qtn.setText(new StringBuilder().append(WXHardCoderJNI.hcAlbumScrollAction).toString());
        this.Qto = (Spinner) findViewById(R.id.bhg);
        this.Qto.setSelection(WXHardCoderJNI.hcAlbumScrollCPU);
        this.Qtp = (Spinner) findViewById(R.id.e0v);
        this.Qtp.setSelection(WXHardCoderJNI.hcAlbumScrollIO);
        this.Qtq = (CheckBox) findViewById(R.id.iln);
        this.Qtq.setChecked(WXHardCoderJNI.hcAlbumScrollThr);
        this.Qtr = (CheckBox) findViewById(R.id.azk);
        this.Qtr.setChecked(WXHardCoderJNI.hcBizEnable);
        this.Qts = (EditText) findViewById(R.id.blr);
        this.Qts.setText(new StringBuilder().append(WXHardCoderJNI.hcBizDelay).toString());
        this.Qtt = (EditText) findViewById(R.id.in8);
        this.Qtt.setText(new StringBuilder().append(WXHardCoderJNI.hcBizTimeout).toString());
        this.Qtu = (EditText) findViewById(R.id.ci);
        this.Qtu.setText(new StringBuilder().append(WXHardCoderJNI.hcBizAction).toString());
        this.Qtv = (Spinner) findViewById(R.id.bhh);
        this.Qtv.setSelection(WXHardCoderJNI.hcBizCPU);
        this.Qtw = (Spinner) findViewById(R.id.e0w);
        this.Qtw.setSelection(WXHardCoderJNI.hcBizIO);
        this.Qtx = (CheckBox) findViewById(R.id.ilo);
        this.Qtx.setChecked(WXHardCoderJNI.hcBizThr);
        this.QqR.setOnClickListener(new View.OnClickListener() {
            /* class com.tencent.mm.ui.tools.HardCoderSettingUI.AnonymousClass4 */

            public final void onClick(View view) {
                AppMethodBeat.i(39062);
                b bVar = new b();
                bVar.bm(view);
                a.b("com/tencent/mm/ui/tools/HardCoderSettingUI$4", "android/view/View$OnClickListener", "onClick", "(Landroid/view/View;)V", this, bVar.axR());
                boolean isChecked = HardCoderSettingUI.this.QqR.isChecked();
                HardCoderSettingUI.this.QqY.setChecked(isChecked);
                HardCoderSettingUI.this.Qsg.setChecked(isChecked);
                HardCoderSettingUI.this.Qrf.setChecked(isChecked);
                HardCoderSettingUI.this.Qrm.setChecked(isChecked);
                HardCoderSettingUI.this.Qrt.setChecked(isChecked);
                HardCoderSettingUI.this.QrA.setChecked(isChecked);
                HardCoderSettingUI.this.QrH.setChecked(isChecked);
                HardCoderSettingUI.this.QrO.setChecked(isChecked);
                HardCoderSettingUI.this.QrW.setChecked(isChecked);
                HardCoderSettingUI.this.Qsn.setChecked(isChecked);
                HardCoderSettingUI.this.Qsu.setChecked(isChecked);
                HardCoderSettingUI.this.QsB.setChecked(isChecked);
                HardCoderSettingUI.this.QsI.setChecked(isChecked);
                HardCoderSettingUI.this.QsP.setChecked(isChecked);
                HardCoderSettingUI.this.QsW.setChecked(isChecked);
                HardCoderSettingUI.this.Qtd.setChecked(isChecked);
                HardCoderSettingUI.this.Qtk.setChecked(isChecked);
                a.a(this, "com/tencent/mm/ui/tools/HardCoderSettingUI$4", "android/view/View$OnClickListener", "onClick", "(Landroid/view/View;)V");
                AppMethodBeat.o(39062);
            }
        });
        AppMethodBeat.o(39065);
    }

    /* access modifiers changed from: protected */
    public Dialog onCreateDialog(int i2) {
        AppMethodBeat.i(39066);
        switch (i2) {
            case 1:
                if (this.Dbg) {
                    TimePickerDialog timePickerDialog = new TimePickerDialog(getContext(), this.Dbh, WXHardCoderJNI.hcBeginTimeHour, WXHardCoderJNI.hcBeginTimeMin, false);
                    AppMethodBeat.o(39066);
                    return timePickerDialog;
                }
                TimePickerDialog timePickerDialog2 = new TimePickerDialog(getContext(), this.Dbh, WXHardCoderJNI.hcEndTimeHour, WXHardCoderJNI.hcBeginTimeMin, false);
                AppMethodBeat.o(39066);
                return timePickerDialog2;
            default:
                AppMethodBeat.o(39066);
                return null;
        }
    }

    private static void b(SharedPreferences.Editor editor) {
        AppMethodBeat.i(39068);
        editor.putBoolean(WXHardCoderJNI.KEY_HC_ENABLE, WXHardCoderJNI.getEnable());
        editor.putBoolean(WXHardCoderJNI.KEY_HC_DEBUG, WXHardCoderJNI.getDebug());
        editor.putInt(WXHardCoderJNI.KEY_HC_RETRY_INTERVAL, WXHardCoderJNI.hcRetryInterval);
        editor.putBoolean(WXHardCoderJNI.KEY_HC_TIME_LIMIT, WXHardCoderJNI.hcTimeLimit);
        editor.putInt(WXHardCoderJNI.KEY_HC_BEGIN_TIME_HOUR, WXHardCoderJNI.hcBeginTimeHour);
        editor.putInt(WXHardCoderJNI.KEY_HC_BEGIN_TIME_MIN, WXHardCoderJNI.hcBeginTimeMin);
        editor.putInt(WXHardCoderJNI.KEY_HC_END_TIME_HOUR, WXHardCoderJNI.hcEndTimeHour);
        editor.putInt(WXHardCoderJNI.KEY_HC_END_TIME_MIN, WXHardCoderJNI.hcEndTimeMin);
        editor.putBoolean(g.KEY_HC_BOOT_ENABLE, WXHardCoderJNI.hcBootEnable);
        editor.putInt(g.KEY_HC_BOOT_DELEY, WXHardCoderJNI.hcBootDelay);
        editor.putInt(g.KEY_HC_BOOT_CPU, WXHardCoderJNI.hcBootCPU);
        editor.putInt(g.KEY_HC_BOOT_IO, WXHardCoderJNI.hcBootIO);
        editor.putBoolean(g.KEY_HC_BOOT_THR, WXHardCoderJNI.hcBootThr);
        editor.putInt(g.KEY_HC_BOOT_TIMEOUT, WXHardCoderJNI.hcBootTimeout);
        editor.putLong(g.KEY_HC_BOOT_ACTION, WXHardCoderJNI.hcBootAction);
        editor.putBoolean(g.KEY_HC_ENTER_CHATTING_ENABLE, WXHardCoderJNI.hcEnterChattingEnable);
        editor.putInt(g.KEY_HC_ENTER_CHATTING_DELEY, WXHardCoderJNI.hcEnterChattingDelay);
        editor.putInt(g.KEY_HC_ENTER_CHATTING_CPU, WXHardCoderJNI.hcEnterChattingCPU);
        editor.putInt(g.KEY_HC_ENTER_CHATTING_IO, WXHardCoderJNI.hcEnterChattingIO);
        editor.putBoolean(g.KEY_HC_ENTER_CHATTING_THR, WXHardCoderJNI.hcEnterChattingThr);
        editor.putInt(g.KEY_HC_ENTER_CHATTING_TIMEOUT, WXHardCoderJNI.hcEnterChattingTimeout);
        editor.putLong(g.KEY_HC_ENTER_CHATTING_ACTION, WXHardCoderJNI.hcEnterChattingAction);
        editor.putBoolean(g.KEY_HC_QUIT_CHATTING_ENABLE, WXHardCoderJNI.hcQuitChattingEnable);
        editor.putInt(g.KEY_HC_QUIT_CHATTING_DELEY, WXHardCoderJNI.hcQuitChattingDelay);
        editor.putInt(g.KEY_HC_QUIT_CHATTING_CPU, WXHardCoderJNI.hcQuitChattingCPU);
        editor.putInt(g.KEY_HC_QUIT_CHATTING_IO, WXHardCoderJNI.hcQuitChattingIO);
        editor.putBoolean(g.KEY_HC_QUIT_CHATTING_THR, WXHardCoderJNI.hcQuitChattingThr);
        editor.putInt(g.KEY_HC_QUIT_CHATTING_TIMEOUT, WXHardCoderJNI.hcQuitChattingTimeout);
        editor.putLong(g.KEY_HC_QUIT_CHATTING_ACTION, WXHardCoderJNI.hcQuitChattingAction);
        editor.putBoolean(g.KEY_HC_SEND_MSG_ENABLE, WXHardCoderJNI.hcSendMsgEnable);
        editor.putInt(g.KEY_HC_SEND_MSG_DELEY, WXHardCoderJNI.hcSendMsgDelay);
        editor.putInt(g.KEY_HC_SEND_MSG_CPU, WXHardCoderJNI.hcSendMsgCPU);
        editor.putInt(g.KEY_HC_SEND_MSG_IO, WXHardCoderJNI.hcSendMsgIO);
        editor.putBoolean(g.KEY_HC_SEND_MSG_THR, WXHardCoderJNI.hcSendMsgThr);
        editor.putInt(g.KEY_HC_SEND_MSG_TIMEOUT, WXHardCoderJNI.hcSendMsgTimeout);
        editor.putLong(g.KEY_HC_SEND_MSG_ACTION, WXHardCoderJNI.hcSendMsgAction);
        editor.putBoolean(g.KEY_HC_SEND_PIC_MSG_ENABLE, WXHardCoderJNI.hcSendPicMsgEnable);
        editor.putInt(g.KEY_HC_SEND_PIC_MSG_DELEY, WXHardCoderJNI.hcSendPicMsgDelay);
        editor.putInt(g.KEY_HC_SEND_PIC_MSG_CPU, WXHardCoderJNI.hcSendPicMsgCPU);
        editor.putInt(g.KEY_HC_SEND_PIC_MSG_IO, WXHardCoderJNI.hcSendPicMsgIO);
        editor.putBoolean(g.KEY_HC_SEND_PIC_MSG_THR, WXHardCoderJNI.hcSendPicMsgThr);
        editor.putInt(g.KEY_HC_SEND_PIC_MSG_TIMEOUT, WXHardCoderJNI.hcSendPicMsgTimeout);
        editor.putLong(g.KEY_HC_SEND_PIC_MSG_ACTION, WXHardCoderJNI.hcSendPicMsgAction);
        editor.putBoolean(g.KEY_HC_RECEIVE_MSG_ENABLE, WXHardCoderJNI.hcReceiveMsgEnable);
        editor.putInt(g.KEY_HC_RECEIVE_MSG_DELEY, WXHardCoderJNI.hcReceiveMsgDelay);
        editor.putInt(g.KEY_HC_RECEIVE_MSG_CPU, WXHardCoderJNI.hcReceiveMsgCPU);
        editor.putInt(g.KEY_HC_RECEIVE_MSG_IO, WXHardCoderJNI.hcReceiveMsgIO);
        editor.putBoolean(g.KEY_HC_RECEIVE_MSG_THR, WXHardCoderJNI.hcReceiveMsgThr);
        editor.putInt(g.KEY_HC_RECEIVE_MSG_TIMEOUT, WXHardCoderJNI.hcReceiveMsgTimeout);
        editor.putLong(g.KEY_HC_RECEIVE_MSG_ACTION, WXHardCoderJNI.hcReceiveMsgAction);
        editor.putBoolean(g.KEY_HC_UPDATE_CHATROOM_ENABLE, WXHardCoderJNI.hcUpdateChatroomEnable);
        editor.putInt(g.KEY_HC_UPDATE_CHATROOM_DELEY, WXHardCoderJNI.hcUpdateChatroomDelay);
        editor.putInt(g.KEY_HC_UPDATE_CHATROOM_CPU, WXHardCoderJNI.hcUpdateChatroomCPU);
        editor.putInt(g.KEY_HC_UPDATE_CHATROOM_IO, WXHardCoderJNI.hcUpdateChatroomIO);
        editor.putBoolean(g.KEY_HC_UPDATE_CHATROOM_THR, WXHardCoderJNI.hcUpdateChatroomThr);
        editor.putInt(g.KEY_HC_UPDATE_CHATROOM_TIMEOUT, WXHardCoderJNI.hcUpdateChatroomTimeout);
        editor.putLong(g.KEY_HC_UPDATE_CHATROOM_ACTION, WXHardCoderJNI.hcUpdateChatroomAction);
        editor.putLong(g.KEY_HC_UPDATE_CHATROOM_MEMBER_COUNT, WXHardCoderJNI.hcUpdateChatroomMemberCount);
        editor.putBoolean(g.KEY_HC_DB_ENABLE, WXHardCoderJNI.hcDBEnable);
        editor.putInt(g.KEY_HC_DB_DELEY_QUERY, WXHardCoderJNI.hcDBDelayQuery);
        editor.putInt(g.KEY_HC_DB_DELEY_WRITE, WXHardCoderJNI.hcDBDelayWrite);
        editor.putInt(g.KEY_HC_DB_CPU, WXHardCoderJNI.hcDBCPU);
        editor.putInt(g.KEY_HC_DB_IO, WXHardCoderJNI.hcDBIO);
        editor.putBoolean(g.KEY_HC_DB_THR, WXHardCoderJNI.hcDBThr);
        editor.putInt(g.KEY_HC_DB_TIMEOUT, WXHardCoderJNI.hcDBTimeout);
        editor.putInt(g.KEY_HC_DB_TIMEOUT, WXHardCoderJNI.hcDBTimeoutBusy);
        editor.putLong(g.KEY_HC_DB_ACTION_QUERY, WXHardCoderJNI.hcDBActionQuery);
        editor.putLong(g.KEY_HC_DB_ACTION_WRITE, WXHardCoderJNI.hcDBActionWrite);
        editor.putBoolean(g.KEY_HC_ENCODE_VIDEO_ENABLE, WXHardCoderJNI.hcEncodeVideoEnable);
        editor.putInt(g.KEY_HC_ENCODE_VIDEO_DELEY, WXHardCoderJNI.hcEncodeVideoDelay);
        editor.putInt(g.KEY_HC_ENCODE_VIDEO_CPU, WXHardCoderJNI.hcEncodeVideoCPU);
        editor.putInt(g.KEY_HC_ENCODE_VIDEO_IO, WXHardCoderJNI.hcEncodeVideoIO);
        editor.putBoolean(g.KEY_HC_ENCODE_VIDEO_THR, WXHardCoderJNI.hcEncodeVideoThr);
        editor.putInt(g.KEY_HC_ENCODE_VIDEO_TIMEOUT, WXHardCoderJNI.hcEncodeVideoTimeout);
        editor.putLong(g.KEY_HC_ENCODE_VIDEO_ACTION, WXHardCoderJNI.hcEncodeVideoAction);
        editor.putBoolean(g.KEY_HC_DECODE_PIC_ENABLE, WXHardCoderJNI.hcDecodePicEnable);
        editor.putInt(g.KEY_HC_DECODE_PIC_DELEY, WXHardCoderJNI.hcDecodePicDelay);
        editor.putInt(g.KEY_HC_DECODE_PIC_CPU, WXHardCoderJNI.hcDecodePicCPU);
        editor.putInt(g.KEY_HC_DECODE_PIC_IO, WXHardCoderJNI.hcDecodePicIO);
        editor.putBoolean(g.KEY_HC_DECODE_PIC_THR, WXHardCoderJNI.hcDecodePicThr);
        editor.putInt(g.KEY_HC_DECODE_PIC_TIMEOUT, WXHardCoderJNI.hcDecodePicTimeout);
        editor.putLong(g.KEY_HC_DECODE_PIC_ACTION, WXHardCoderJNI.hcDecodePicAction);
        editor.putBoolean(g.KEY_HC_GIF_ENABLE, WXHardCoderJNI.hcGifEnable);
        editor.putInt(g.KEY_HC_GIF_DELEY, WXHardCoderJNI.hcGifDelay);
        editor.putInt(g.KEY_HC_GIF_CPU, WXHardCoderJNI.hcGifCPU);
        editor.putInt(g.KEY_HC_GIF_IO, WXHardCoderJNI.hcGifIO);
        editor.putBoolean(g.KEY_HC_GIF_THR, WXHardCoderJNI.hcGifThr);
        editor.putInt(g.KEY_HC_GIF_TIMEOUT, WXHardCoderJNI.hcGifTimeout);
        editor.putLong(g.KEY_HC_GIF_ACTION, WXHardCoderJNI.hcGifAction);
        editor.putBoolean(g.KEY_HC_GIF_FRAME_ENABLE, WXHardCoderJNI.hcGifFrameEnable);
        editor.putInt(g.KEY_HC_GIF_FRAME_DELEY, WXHardCoderJNI.hcGifFrameDelay);
        editor.putInt(g.KEY_HC_GIF_FRAME_CPU, WXHardCoderJNI.hcGifFrameCPU);
        editor.putInt(g.KEY_HC_GIF_FRAME_IO, WXHardCoderJNI.hcGifFrameIO);
        editor.putBoolean(g.KEY_HC_GIF_FRAME_THR, WXHardCoderJNI.hcGifFrameThr);
        editor.putInt(g.KEY_HC_GIF_FRAME_TIMEOUT, WXHardCoderJNI.hcGifFrameTimeout);
        editor.putLong(g.KEY_HC_GIF_FRAME_ACTION, WXHardCoderJNI.hcGifFrameAction);
        editor.putBoolean(g.KEY_HC_SNS_SCROLL_ENABLE, WXHardCoderJNI.hcSNSScrollEnable);
        editor.putInt(g.KEY_HC_SNS_SCROLL_DELEY, WXHardCoderJNI.hcSNSScrollDelay);
        editor.putInt(g.KEY_HC_SNS_SCROLL_CPU, WXHardCoderJNI.hcSNSScrollCPU);
        editor.putInt(g.KEY_HC_SNS_SCROLL_IO, WXHardCoderJNI.hcSNSScrollIO);
        editor.putBoolean(g.KEY_HC_SNS_SCROLL_THR, WXHardCoderJNI.hcSNSScrollThr);
        editor.putInt(g.KEY_HC_SNS_SCROLL_TIMEOUT, WXHardCoderJNI.hcSNSScrollTimeout);
        editor.putLong(g.KEY_HC_SNS_SCROLL_ACTION, WXHardCoderJNI.hcSNSScrollAction);
        editor.putBoolean(g.KEY_HC_SNS_USER_SCROLL_ENABLE, WXHardCoderJNI.hcSNSUserScrollEnable);
        editor.putInt(g.KEY_HC_SNS_USER_SCROLL_DELEY, WXHardCoderJNI.hcSNSUserScrollDelay);
        editor.putInt(g.KEY_HC_SNS_USER_SCROLL_CPU, WXHardCoderJNI.hcSNSUserScrollCPU);
        editor.putInt(g.KEY_HC_SNS_USER_SCROLL_IO, WXHardCoderJNI.hcSNSUserScrollIO);
        editor.putBoolean(g.KEY_HC_SNS_USER_SCROLL_THR, WXHardCoderJNI.hcSNSUserScrollThr);
        editor.putInt(g.KEY_HC_SNS_USER_SCROLL_TIMEOUT, WXHardCoderJNI.hcSNSUserScrollTimeout);
        editor.putLong(g.KEY_HC_SNS_USER_SCROLL_ACTION, WXHardCoderJNI.hcSNSUserScrollAction);
        editor.putBoolean(g.KEY_HC_SNS_MSG_SCROLL_ENABLE, WXHardCoderJNI.hcSNSMsgScrollEnable);
        editor.putInt(g.KEY_HC_SNS_MSG_SCROLL_DELEY, WXHardCoderJNI.hcSNSMsgScrollDelay);
        editor.putInt(g.KEY_HC_SNS_MSG_SCROLL_CPU, WXHardCoderJNI.hcSNSMsgScrollCPU);
        editor.putInt(g.KEY_HC_SNS_MSG_SCROLL_IO, WXHardCoderJNI.hcSNSMsgScrollIO);
        editor.putBoolean(g.KEY_HC_SNS_MSG_SCROLL_THR, WXHardCoderJNI.hcSNSMsgScrollThr);
        editor.putInt(g.KEY_HC_SNS_MSG_SCROLL_TIMEOUT, WXHardCoderJNI.hcSNSMsgScrollTimeout);
        editor.putLong(g.KEY_HC_SNS_MSG_SCROLL_ACTION, WXHardCoderJNI.hcSNSMsgScrollAction);
        editor.putBoolean(g.KEY_HC_MEDIA_GALLERY_SCROLL_ENABLE, WXHardCoderJNI.hcMediaGalleryScrollEnable);
        editor.putInt(g.KEY_HC_MEDIA_GALLERY_SCROLL_DELEY, WXHardCoderJNI.hcMediaGalleryScrollDelay);
        editor.putInt(g.KEY_HC_MEDIA_GALLERY_SCROLL_CPU, WXHardCoderJNI.hcMediaGalleryScrollCPU);
        editor.putInt(g.KEY_HC_MEDIA_GALLERY_SCROLL_IO, WXHardCoderJNI.hcMediaGalleryScrollIO);
        editor.putBoolean(g.KEY_HC_MEDIA_GALLERY_SCROLL_THR, WXHardCoderJNI.hcMediaGalleryScrollThr);
        editor.putInt(g.KEY_HC_MEDIA_GALLERY_SCROLL_TIMEOUT, WXHardCoderJNI.hcMediaGalleryScrollTimeout);
        editor.putLong(g.KEY_HC_MEDIA_GALLERY_SCROLL_ACTION, WXHardCoderJNI.hcMediaGalleryScrollAction);
        editor.putBoolean(g.KEY_HC_ALBUM_SCROLL_ENABLE, WXHardCoderJNI.hcAlbumScrollEnable);
        editor.putInt(g.KEY_HC_ALBUM_SCROLL_DELEY, WXHardCoderJNI.hcAlbumScrollDelay);
        editor.putInt(g.KEY_HC_ALBUM_SCROLL_CPU, WXHardCoderJNI.hcAlbumScrollCPU);
        editor.putInt(g.KEY_HC_ALBUM_SCROLL_IO, WXHardCoderJNI.hcAlbumScrollIO);
        editor.putBoolean(g.KEY_HC_ALBUM_SCROLL_THR, WXHardCoderJNI.hcAlbumScrollThr);
        editor.putInt(g.KEY_HC_ALBUM_SCROLL_TIMEOUT, WXHardCoderJNI.hcAlbumScrollTimeout);
        editor.putLong(g.KEY_HC_ALBUM_SCROLL_ACTION, WXHardCoderJNI.hcAlbumScrollAction);
        editor.apply();
        AppMethodBeat.o(39068);
    }

    @Override // com.tencent.mm.ui.MMActivity
    public int getLayoutId() {
        return R.layout.au6;
    }

    private static String i(Context context, int i2, int i3) {
        int i4;
        AppMethodBeat.i(39069);
        String loadApplicationLanguageSettings = LocaleUtil.loadApplicationLanguageSettings(context.getSharedPreferences(MMApplicationContext.getDefaultPreferencePath(), 0), context);
        String applicationLanguage = LocaleUtil.getApplicationLanguage();
        if (loadApplicationLanguageSettings.equalsIgnoreCase(LocaleUtil.CHINA) || (loadApplicationLanguageSettings.equalsIgnoreCase(LocaleUtil.LANGUAGE_DEFAULT) && LocaleUtil.CHINA.equalsIgnoreCase(applicationLanguage))) {
            if (i2 > 12) {
                i4 = i2 - 12;
            } else {
                i4 = i2;
            }
            String str = ((Object) f.v(context, (((long) i2) * Util.MILLSECONDS_OF_HOUR) + (((long) i3) * Util.MILLSECONDS_OF_MINUTE))) + String.format("%02d:%02d", Integer.valueOf(i4), Integer.valueOf(i3));
            AppMethodBeat.o(39069);
            return str;
        }
        String format = DateFormat.getTimeInstance(3, LocaleUtil.transLanguageToLocale(loadApplicationLanguageSettings)).format(new Time(i2, i3, 0));
        AppMethodBeat.o(39069);
        return format;
    }

    @Override // com.tencent.mm.ui.component.UIComponentActivity, com.tencent.mm.ui.MMActivity, com.tencent.mm.hellhoundlib.activities.HellActivity, android.support.v7.app.AppCompatActivity, com.tencent.mm.ui.MMFragmentActivity, android.support.v4.app.FragmentActivity
    public void onDestroy() {
        AppMethodBeat.i(39067);
        Log.i("HardCoderSettingUI", "save");
        if (this.QqR.isChecked() && !WXHardCoderJNI.getEnable()) {
            WXHardCoderJNI.setHcEnable(this.QqR.isChecked());
            WXHardCoderJNI.initHardCoder(com.tencent.mm.plugin.hardcoder.a.dYI(), com.tencent.mm.plugin.hardcoder.a.dYI(), null);
        }
        WXHardCoderJNI.setDebug(this.QqT.isChecked());
        WXHardCoderJNI.setHcEnable(this.QqR.isChecked());
        WXHardCoderJNI.hcRetryInterval = Util.getInt(this.QqS.getText().toString(), WXHardCoderJNI.hcRetryInterval);
        if (WXHardCoderJNI.isCheckEnv()) {
            WXHardCoderJNI.setDebug(WXHardCoderJNI.getDebug());
            WXHardCoderJNI.setHcEnable(WXHardCoderJNI.getEnable());
            WXHardCoderJNI.setRetryConnectInterval(WXHardCoderJNI.hcRetryInterval);
        }
        WXHardCoderJNI.hcTimeLimit = this.QqV.isChecked();
        WXHardCoderJNI.hcBootEnable = this.QqY.isChecked();
        WXHardCoderJNI.hcBootDelay = Util.getInt(this.QqZ.getText().toString(), WXHardCoderJNI.hcBootDelay);
        WXHardCoderJNI.hcBootCPU = this.Qrc.getSelectedItemPosition();
        WXHardCoderJNI.hcBootIO = this.Qrd.getSelectedItemPosition();
        WXHardCoderJNI.hcBootThr = this.Qre.isChecked();
        WXHardCoderJNI.hcBootTimeout = Util.getInt(this.Qra.getText().toString(), WXHardCoderJNI.hcBootTimeout);
        WXHardCoderJNI.hcBootAction = Util.getLong(this.Qrb.getText().toString(), WXHardCoderJNI.hcBootAction);
        WXHardCoderJNI.hcEnterChattingEnable = this.Qrf.isChecked();
        WXHardCoderJNI.hcEnterChattingDelay = Util.getInt(this.Qrg.getText().toString(), WXHardCoderJNI.hcEnterChattingDelay);
        WXHardCoderJNI.hcEnterChattingCPU = this.Qrj.getSelectedItemPosition();
        WXHardCoderJNI.hcEnterChattingIO = this.Qrk.getSelectedItemPosition();
        WXHardCoderJNI.hcEnterChattingThr = this.Qrl.isChecked();
        WXHardCoderJNI.hcEnterChattingTimeout = Util.getInt(this.Qrh.getText().toString(), WXHardCoderJNI.hcEnterChattingTimeout);
        WXHardCoderJNI.hcEnterChattingAction = Util.getLong(this.Qri.getText().toString(), WXHardCoderJNI.hcEnterChattingAction);
        WXHardCoderJNI.hcQuitChattingEnable = this.Qrm.isChecked();
        WXHardCoderJNI.hcQuitChattingDelay = Util.getInt(this.Qrn.getText().toString(), WXHardCoderJNI.hcQuitChattingDelay);
        WXHardCoderJNI.hcQuitChattingCPU = this.Qrq.getSelectedItemPosition();
        WXHardCoderJNI.hcQuitChattingIO = this.Qrr.getSelectedItemPosition();
        WXHardCoderJNI.hcQuitChattingThr = this.Qrs.isChecked();
        WXHardCoderJNI.hcQuitChattingTimeout = Util.getInt(this.Qro.getText().toString(), WXHardCoderJNI.hcQuitChattingTimeout);
        WXHardCoderJNI.hcQuitChattingAction = Util.getLong(this.Qrp.getText().toString(), WXHardCoderJNI.hcQuitChattingAction);
        WXHardCoderJNI.hcSendMsgEnable = this.Qrt.isChecked();
        WXHardCoderJNI.hcSendMsgDelay = Util.getInt(this.Qru.getText().toString(), WXHardCoderJNI.hcSendMsgDelay);
        WXHardCoderJNI.hcSendMsgCPU = this.Qrx.getSelectedItemPosition();
        WXHardCoderJNI.hcSendMsgIO = this.Qry.getSelectedItemPosition();
        WXHardCoderJNI.hcSendMsgThr = this.Qrz.isChecked();
        WXHardCoderJNI.hcSendMsgTimeout = Util.getInt(this.Qrv.getText().toString(), WXHardCoderJNI.hcSendMsgTimeout);
        WXHardCoderJNI.hcSendMsgAction = Util.getLong(this.Qrw.getText().toString(), WXHardCoderJNI.hcSendMsgAction);
        WXHardCoderJNI.hcSendPicMsgEnable = this.QrA.isChecked();
        WXHardCoderJNI.hcSendPicMsgDelay = Util.getInt(this.QrB.getText().toString(), WXHardCoderJNI.hcSendPicMsgDelay);
        WXHardCoderJNI.hcSendPicMsgCPU = this.QrE.getSelectedItemPosition();
        WXHardCoderJNI.hcSendPicMsgIO = this.QrF.getSelectedItemPosition();
        WXHardCoderJNI.hcSendPicMsgThr = this.QrG.isChecked();
        WXHardCoderJNI.hcSendPicMsgTimeout = Util.getInt(this.QrC.getText().toString(), WXHardCoderJNI.hcSendPicMsgTimeout);
        WXHardCoderJNI.hcSendPicMsgAction = Util.getLong(this.QrD.getText().toString(), WXHardCoderJNI.hcSendPicMsgAction);
        WXHardCoderJNI.hcReceiveMsgEnable = this.QrH.isChecked();
        WXHardCoderJNI.hcReceiveMsgDelay = Util.getInt(this.QrI.getText().toString(), WXHardCoderJNI.hcReceiveMsgDelay);
        WXHardCoderJNI.hcReceiveMsgCPU = this.QrL.getSelectedItemPosition();
        WXHardCoderJNI.hcReceiveMsgIO = this.QrM.getSelectedItemPosition();
        WXHardCoderJNI.hcReceiveMsgThr = this.QrN.isChecked();
        WXHardCoderJNI.hcReceiveMsgTimeout = Util.getInt(this.QrJ.getText().toString(), WXHardCoderJNI.hcReceiveMsgTimeout);
        WXHardCoderJNI.hcReceiveMsgAction = Util.getLong(this.QrK.getText().toString(), WXHardCoderJNI.hcReceiveMsgAction);
        WXHardCoderJNI.hcUpdateChatroomEnable = this.QrO.isChecked();
        WXHardCoderJNI.hcUpdateChatroomDelay = Util.getInt(this.QrP.getText().toString(), WXHardCoderJNI.hcUpdateChatroomDelay);
        WXHardCoderJNI.hcUpdateChatroomCPU = this.QrS.getSelectedItemPosition();
        WXHardCoderJNI.hcUpdateChatroomIO = this.QrT.getSelectedItemPosition();
        WXHardCoderJNI.hcUpdateChatroomThr = this.QrU.isChecked();
        WXHardCoderJNI.hcUpdateChatroomTimeout = Util.getInt(this.QrQ.getText().toString(), WXHardCoderJNI.hcUpdateChatroomTimeout);
        WXHardCoderJNI.hcUpdateChatroomAction = Util.getLong(this.QrR.getText().toString(), WXHardCoderJNI.hcUpdateChatroomAction);
        WXHardCoderJNI.hcUpdateChatroomMemberCount = Util.getLong(this.QrV.getText().toString(), WXHardCoderJNI.hcUpdateChatroomMemberCount);
        WXHardCoderJNI.hcDBEnable = this.QrW.isChecked();
        WXHardCoderJNI.hcDBDelayQuery = Util.getInt(this.QrX.getText().toString(), WXHardCoderJNI.hcDBDelayQuery);
        WXHardCoderJNI.hcDBDelayWrite = Util.getInt(this.QrY.getText().toString(), WXHardCoderJNI.hcDBDelayWrite);
        WXHardCoderJNI.hcDBCPU = this.Qrc.getSelectedItemPosition();
        WXHardCoderJNI.hcDBIO = this.Qrd.getSelectedItemPosition();
        WXHardCoderJNI.hcDBThr = this.Qre.isChecked();
        WXHardCoderJNI.hcDBTimeout = Util.getInt(this.QrZ.getText().toString(), WXHardCoderJNI.hcDBTimeout);
        WXHardCoderJNI.hcDBTimeoutBusy = Util.getInt(this.Qsa.getText().toString(), WXHardCoderJNI.hcDBTimeoutBusy);
        WXHardCoderJNI.hcDBActionQuery = Util.getLong(this.Qsb.getText().toString(), WXHardCoderJNI.hcDBActionQuery);
        WXHardCoderJNI.hcDBActionWrite = Util.getLong(this.Qsc.getText().toString(), WXHardCoderJNI.hcDBActionWrite);
        WXHardCoderJNI.hcEncodeVideoEnable = this.Qsg.isChecked();
        WXHardCoderJNI.hcEncodeVideoDelay = Util.getInt(this.Qsh.getText().toString(), WXHardCoderJNI.hcEncodeVideoDelay);
        WXHardCoderJNI.hcEncodeVideoCPU = this.Qsk.getSelectedItemPosition();
        WXHardCoderJNI.hcEncodeVideoIO = this.Qsl.getSelectedItemPosition();
        WXHardCoderJNI.hcEncodeVideoThr = this.Qsm.isChecked();
        WXHardCoderJNI.hcEncodeVideoTimeout = Util.getInt(this.Qsi.getText().toString(), WXHardCoderJNI.hcEncodeVideoTimeout);
        WXHardCoderJNI.hcEncodeVideoAction = Util.getLong(this.Qsj.getText().toString(), WXHardCoderJNI.hcEncodeVideoAction);
        WXHardCoderJNI.hcDecodePicEnable = this.Qsn.isChecked();
        WXHardCoderJNI.hcDecodePicDelay = Util.getInt(this.Qso.getText().toString(), WXHardCoderJNI.hcDecodePicDelay);
        WXHardCoderJNI.hcDecodePicCPU = this.Qsr.getSelectedItemPosition();
        WXHardCoderJNI.hcDecodePicIO = this.Qss.getSelectedItemPosition();
        WXHardCoderJNI.hcDecodePicThr = this.Qst.isChecked();
        WXHardCoderJNI.hcDecodePicTimeout = Util.getInt(this.Qsp.getText().toString(), WXHardCoderJNI.hcDecodePicTimeout);
        WXHardCoderJNI.hcDecodePicAction = Util.getLong(this.Qsq.getText().toString(), WXHardCoderJNI.hcDecodePicAction);
        WXHardCoderJNI.hcGifEnable = this.Qsu.isChecked();
        WXHardCoderJNI.hcGifDelay = Util.getInt(this.Qsv.getText().toString(), WXHardCoderJNI.hcGifDelay);
        WXHardCoderJNI.hcGifCPU = this.Qsy.getSelectedItemPosition();
        WXHardCoderJNI.hcGifIO = this.Qsz.getSelectedItemPosition();
        WXHardCoderJNI.hcGifThr = this.QsA.isChecked();
        WXHardCoderJNI.hcGifTimeout = Util.getInt(this.Qsw.getText().toString(), WXHardCoderJNI.hcGifTimeout);
        WXHardCoderJNI.hcGifAction = Util.getLong(this.Qsx.getText().toString(), WXHardCoderJNI.hcGifAction);
        WXHardCoderJNI.hcGifFrameEnable = this.QsB.isChecked();
        WXHardCoderJNI.hcGifFrameDelay = Util.getInt(this.QsC.getText().toString(), WXHardCoderJNI.hcGifFrameDelay);
        WXHardCoderJNI.hcGifFrameCPU = this.QsF.getSelectedItemPosition();
        WXHardCoderJNI.hcGifFrameIO = this.QsG.getSelectedItemPosition();
        WXHardCoderJNI.hcGifFrameThr = this.QsH.isChecked();
        WXHardCoderJNI.hcGifFrameTimeout = Util.getInt(this.QsD.getText().toString(), WXHardCoderJNI.hcGifFrameTimeout);
        WXHardCoderJNI.hcGifFrameAction = Util.getLong(this.QsE.getText().toString(), WXHardCoderJNI.hcGifFrameAction);
        WXHardCoderJNI.hcSNSScrollEnable = this.QsI.isChecked();
        WXHardCoderJNI.hcSNSScrollDelay = Util.getInt(this.QsJ.getText().toString(), WXHardCoderJNI.hcSNSScrollDelay);
        WXHardCoderJNI.hcSNSScrollCPU = this.QsM.getSelectedItemPosition();
        WXHardCoderJNI.hcSNSScrollIO = this.QsN.getSelectedItemPosition();
        WXHardCoderJNI.hcSNSScrollThr = this.QsO.isChecked();
        WXHardCoderJNI.hcSNSScrollTimeout = Util.getInt(this.QsK.getText().toString(), WXHardCoderJNI.hcSNSScrollTimeout);
        WXHardCoderJNI.hcSNSScrollAction = Util.getLong(this.QsL.getText().toString(), WXHardCoderJNI.hcSNSScrollAction);
        WXHardCoderJNI.hcSNSUserScrollEnable = this.QsP.isChecked();
        WXHardCoderJNI.hcSNSUserScrollDelay = Util.getInt(this.QsQ.getText().toString(), WXHardCoderJNI.hcSNSUserScrollDelay);
        WXHardCoderJNI.hcSNSUserScrollCPU = this.QsT.getSelectedItemPosition();
        WXHardCoderJNI.hcSNSUserScrollIO = this.QsU.getSelectedItemPosition();
        WXHardCoderJNI.hcSNSUserScrollThr = this.QsV.isChecked();
        WXHardCoderJNI.hcSNSUserScrollTimeout = Util.getInt(this.QsR.getText().toString(), WXHardCoderJNI.hcSNSUserScrollTimeout);
        WXHardCoderJNI.hcSNSUserScrollAction = Util.getLong(this.QsS.getText().toString(), WXHardCoderJNI.hcSNSUserScrollAction);
        WXHardCoderJNI.hcSNSMsgScrollEnable = this.QsW.isChecked();
        WXHardCoderJNI.hcSNSMsgScrollDelay = Util.getInt(this.QsX.getText().toString(), WXHardCoderJNI.hcSNSMsgScrollDelay);
        WXHardCoderJNI.hcSNSMsgScrollCPU = this.Qta.getSelectedItemPosition();
        WXHardCoderJNI.hcSNSMsgScrollIO = this.Qtb.getSelectedItemPosition();
        WXHardCoderJNI.hcSNSMsgScrollThr = this.Qtc.isChecked();
        WXHardCoderJNI.hcSNSMsgScrollTimeout = Util.getInt(this.QsY.getText().toString(), WXHardCoderJNI.hcSNSMsgScrollTimeout);
        WXHardCoderJNI.hcSNSMsgScrollAction = Util.getLong(this.QsZ.getText().toString(), WXHardCoderJNI.hcSNSMsgScrollAction);
        WXHardCoderJNI.hcMediaGalleryScrollEnable = this.Qtd.isChecked();
        WXHardCoderJNI.hcMediaGalleryScrollDelay = Util.getInt(this.Qte.getText().toString(), WXHardCoderJNI.hcMediaGalleryScrollDelay);
        WXHardCoderJNI.hcMediaGalleryScrollCPU = this.Qth.getSelectedItemPosition();
        WXHardCoderJNI.hcMediaGalleryScrollIO = this.Qti.getSelectedItemPosition();
        WXHardCoderJNI.hcMediaGalleryScrollThr = this.Qtj.isChecked();
        WXHardCoderJNI.hcMediaGalleryScrollTimeout = Util.getInt(this.Qtf.getText().toString(), WXHardCoderJNI.hcMediaGalleryScrollTimeout);
        WXHardCoderJNI.hcMediaGalleryScrollAction = Util.getLong(this.Qtg.getText().toString(), WXHardCoderJNI.hcMediaGalleryScrollAction);
        WXHardCoderJNI.hcAlbumScrollEnable = this.Qtk.isChecked();
        WXHardCoderJNI.hcAlbumScrollDelay = Util.getInt(this.Qtl.getText().toString(), WXHardCoderJNI.hcAlbumScrollDelay);
        WXHardCoderJNI.hcAlbumScrollCPU = this.Qto.getSelectedItemPosition();
        WXHardCoderJNI.hcAlbumScrollIO = this.Qtp.getSelectedItemPosition();
        WXHardCoderJNI.hcAlbumScrollThr = this.Qtq.isChecked();
        WXHardCoderJNI.hcAlbumScrollTimeout = Util.getInt(this.Qtm.getText().toString(), WXHardCoderJNI.hcAlbumScrollTimeout);
        WXHardCoderJNI.hcAlbumScrollAction = Util.getLong(this.Qtn.getText().toString(), WXHardCoderJNI.hcAlbumScrollAction);
        WXHardCoderJNI.hcBizEnable = this.Qtr.isChecked();
        WXHardCoderJNI.hcBizDelay = Util.getInt(this.Qts.getText().toString(), WXHardCoderJNI.hcBizDelay);
        WXHardCoderJNI.hcBizCPU = this.Qtv.getSelectedItemPosition();
        WXHardCoderJNI.hcBizIO = this.Qtw.getSelectedItemPosition();
        WXHardCoderJNI.hcBizThr = this.Qtx.isChecked();
        WXHardCoderJNI.hcBizTimeout = Util.getInt(this.Qtt.getText().toString(), WXHardCoderJNI.hcBizTimeout);
        WXHardCoderJNI.hcBizAction = Util.getLong(this.Qtu.getText().toString(), WXHardCoderJNI.hcBizAction);
        b(getContext().getSharedPreferences(WXHardCoderJNI.SETTING_SP_FILE, 0).edit());
        WXHardCoderJNI.reloadSPConfig(WXHardCoderJNI.RELOAD_SCENE_SETTING);
        super.onDestroy();
        AppMethodBeat.o(39067);
    }
}
